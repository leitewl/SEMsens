new.model
sample.cov
sem(model = new.model, sample.cov = sample.cov,
sample.nobs = sample.nobs)
Sens.Param.Vector
Sens.Param.Vector = c(.5, .5, .5)
Sens.Param.Vector
OBJECTIVEfunction <- function(Sens.Param.Vector,
opt.fun = opt.fun,
paths = paths){
Sens.Param.Vector <- as.vector(Sens.Param.Vector)
new.model = sens.model
for (i in 1:n.of.sens.pars) {
new.model = gsub(paste("phantom",i, sep=""), paste(Sens.Param.Vector[i]),
new.model, ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
}
try({
new.model = lavaan::lavaanify(new.model, auto = T, model.type = "sem")
warnings <- options(warn = 2)
if (is.null(data)){
new.out = try(lavaan::sem(model = new.model, sample.cov = sample.cov,
sample.nobs = sample.nobs, ...), silent = TRUE)
} else {
new.out = try(lavaan::sem(model = new.model, data = data, ...), silent = TRUE)
}
on.exit(options(warnings))
if(isTRUE(class(new.out)=="try-error")) {return(NA)}
new.par <- lavaan::standardizedSolution(new.out, type="std.all")
if (!is.numeric(opt.fun)){
y <-  eval(opt.fun)
} else if (opt.fun == 1) {
# if opt.fun==1, we assess the average departure of estimator in the
#   sensitivity analysis model from the analytic model divided by
#   the estimator in the analytic model
y <-  mean(abs(old.par$est[paths]), na.rm = TRUE)/
mean(abs(new.par$est[paths]), na.rm = TRUE)
} else if (opt.fun == 2){
# if opt.fun==2, we assess the standard deviation of estimate in
#    the sensitivity analysis model from the analytic model divided by
#    the estimate in the analytic model
y <-  stats::sd(new.par$est[paths] - old.par$est[paths], na.rm = TRUE)/
mean(abs(old.par$est[paths]), na.rm = TRUE)
} else if (opt.fun == 3) {
# if opt.fun==3, we assess the average p-value changed
y <-  mean(abs(new.par$pvalue[paths] - old.par$pvalue[paths]), na.rm = TRUE)
} else if (opt.fun == 4){
# if opt.fun==4, we assess the average distance of p-value from the significance level
y <-  1 / mean(abs(new.par$pvalue[paths] - rep(sig.level,length(paths))), na.rm = TRUE)
} else if (opt.fun == 5){
# if opt.fun==5, we assess the change of RMSEA
y <-  abs(unname(lavaan::fitmeasures(new.out)["rmsea"]) -
unname(lavaan::fitmeasures(old.out)["rmsea"]))
} else if (opt.fun == 6){
# if opt.fun==6, we optimize how close RMSEA is to 0.05
y <-  1/abs(unname(lavaan::fitmeasures(new.out)["rmsea"]) - 0.05)
}
}, silent = TRUE)
### Need to check to see if model converged to avoid the algorithm crashing.
if (is.null(new.out) == FALSE){
return(y)
}
else{return(NA)}
}
f_prop <- OBJECTIVEfunction(Sens.Param.Vector = s_prop,
opt.fun = opt.fun, paths = paths)
f_prop
Sens.Param.Vector <- as.vector(Sens.Param.Vector)
new.model = sens.model
for (i in 1:n.of.sens.pars) {
new.model = gsub(paste("phantom",i, sep=""), paste(Sens.Param.Vector[i]),
new.model, ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
}
new.model
Sens.Param.Vector = c(0, 0, 0)
Sens.Param.Vector <- as.vector(Sens.Param.Vector)
new.model = sens.model
for (i in 1:n.of.sens.pars) {
new.model = gsub(paste("phantom",i, sep=""), paste(Sens.Param.Vector[i]),
new.model, ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
}
try({
new.model = lavaan::lavaanify(new.model, auto = T, model.type = "sem")
warnings <- options(warn = 2)
if (is.null(data)){
new.out = try(lavaan::sem(model = new.model, sample.cov = sample.cov,
sample.nobs = sample.nobs, ...), silent = TRUE)
} else {
new.out = try(lavaan::sem(model = new.model, data = data, ...), silent = TRUE)
}
on.exit(options(warnings))
if(isTRUE(class(new.out)=="try-error")) {return(NA)}
new.par <- lavaan::standardizedSolution(new.out, type="std.all")
if (!is.numeric(opt.fun)){
y <-  eval(opt.fun)
} else if (opt.fun == 1) {
# if opt.fun==1, we assess the average departure of estimator in the
#   sensitivity analysis model from the analytic model divided by
#   the estimator in the analytic model
y <-  mean(abs(old.par$est[paths]), na.rm = TRUE)/
mean(abs(new.par$est[paths]), na.rm = TRUE)
} else if (opt.fun == 2){
# if opt.fun==2, we assess the standard deviation of estimate in
#    the sensitivity analysis model from the analytic model divided by
#    the estimate in the analytic model
y <-  stats::sd(new.par$est[paths] - old.par$est[paths], na.rm = TRUE)/
mean(abs(old.par$est[paths]), na.rm = TRUE)
} else if (opt.fun == 3) {
# if opt.fun==3, we assess the average p-value changed
y <-  mean(abs(new.par$pvalue[paths] - old.par$pvalue[paths]), na.rm = TRUE)
} else if (opt.fun == 4){
# if opt.fun==4, we assess the average distance of p-value from the significance level
y <-  1 / mean(abs(new.par$pvalue[paths] - rep(sig.level,length(paths))), na.rm = TRUE)
} else if (opt.fun == 5){
# if opt.fun==5, we assess the change of RMSEA
y <-  abs(unname(lavaan::fitmeasures(new.out)["rmsea"]) -
unname(lavaan::fitmeasures(old.out)["rmsea"]))
} else if (opt.fun == 6){
# if opt.fun==6, we optimize how close RMSEA is to 0.05
y <-  1/abs(unname(lavaan::fitmeasures(new.out)["rmsea"]) - 0.05)
}
}, silent = TRUE)
### Need to check to see if model converged to avoid the algorithm crashing.
if (is.null(new.out) == FALSE){
return(y)
}
is.null(new.out)
new.out = try(lavaan::sem(model = new.model, sample.cov = sample.cov,
sample.nobs = sample.nobs, ...), silent = TRUE)
new.out
new.model = lavaan::lavaanify(new.model, auto = T, model.type = "sem")
new.out = try(lavaan::sem(model = new.model, sample.cov = sample.cov,
sample.nobs = sample.nobs), silent = TRUE)
new.out
# Set up the analytic model of interest
#
model <-
model_0 <- '
Selfefficacy  ~ ECSE  + education
Instructional ~ ECSE + Minority + PFP
'
### Template to generate the sensitivity models
sens.model = '
Selfefficacy  ~ ECSE  + education
Instructional ~ ECSE + Minority + PFP
ECSE ~ phantom1*phantom
Selfefficacy ~ phantom2*phantom
phantom =~ 0           # mean of zero
phantom ~~ 1*phantom   # unit variance
'
# Calculate the number of sensitivity parameters
for.n.of.sens.pars <- lavaan::lavaanify(sens.model, fixed.x = TRUE)
paths = NULL
n.of.sens.pars <-length(for.n.of.sens.pars[which(
for.n.of.sens.pars$lhs!="phantom" &
for.n.of.sens.pars$rhs=="phantom"), ]$lhs)
if (n.of.sens.pars < 2)
if (n.of.sens.pars < 2)
stop ("Sensitivity model must have at least two sensitivity parameters or phantom coefficients.")
# Run analytic model and pull results
if (is.null(data)){
old.out = lavaan::sem(model = model, sample.cov = sample.cov,
sample.nobs = sample.nobs, ...)
} else {
old.out = lavaan::sem(model = model, data = data, ...)
}
# Run analytic model and pull results
if (is.null(data)){
old.out = lavaan::sem(model = model, sample.cov = sample.cov,
sample.nobs = sample.nobs)
} else {
old.out = lavaan::sem(model = model, data = data)
}
old.out
old.par = lavaan::standardizedSolution(old.out, type = "std.all")
old.fit <- lavaan::fitMeasures(old.out)
old.par
if (is.null(paths)) {paths <- old.par} # if paths are not set, all paths are included
if (is.character(paths)) {paths <- lavaan::lavaanify(paths, fixed.x = TRUE)} # if paths are in model format
if(is.data.frame(paths)){
if (measurement){
paths <- which(old.par$lhs %in% paths$lhs & old.par$rhs %in% paths$rhs)
} else {
paths <- which(old.par$lhs %in% paths$lhs & old.par$op =="~" & old.par$rhs %in% paths$rhs)
}
}
paths
# initiate a number of k sensitivity analysis models with random sensitivity parameters
#  sampled from domains
if (is.null(d)) {
d <- rep(list(seq(-1, 1, by=.01)), n.of.sens.pars)
} else {
if(!is.list(d)) stop("d (domain) must be in a list format; e.g.,
d =     list(x1 = seq(-1, 1, by=.01),
x2 = seq(-1, 1, by=.01),
x3 = seq(-1, 1, by=.01),
x4 = seq(-1, 1, by=.01),
x5 = seq(-1, 1, by=.01))")
}
Neighbour <- function(x) {
change.what <- sample.int(length(d), 1)
x[change.what] <- sample(d[[change.what]], 1)
return(x)
}
s0<- list() # sensitivity parameters
F0<- list() # objective function values
Sens.Param.Vector
Sens.Param.Vector <- as.vector(Sens.Param.Vector)
new.model = sens.model
for (i in 1:n.of.sens.pars) {
new.model = gsub(paste("phantom",i, sep=""), paste(Sens.Param.Vector[i]),
new.model, ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
}
new.model
new.model = lavaan::lavaanify(new.model, auto = T, model.type = "sem")
new.model
new.out = try(lavaan::sem(model = new.model, sample.cov = sample.cov,
sample.nobs = sample.nobs), silent = TRUE)
new.out
?sa.aco
library(SEMsens)
?sa.aco
install.packages("SEMsens")
library(SEMsens)
?sa.aco
library(lavaan)
# Generate data, this is optional as lavaan also takes variance covariance matrix
sim.model <- ' x =~ x1 + 0.8*x2 + 1.2*x3
y =~ y1 + 0.5*y2 + 1.5*y3
m ~ 0.5*x
y ~ 0.5*x + 0.8*m'
set.seed(10)
data <- simulateData(sim.model, sample.nobs = 1000L)
# standardize dataset
data = data.frame(apply(data,2,scale))
# Step 1: Set up the analytic model of interest
model <- 'x =~ x1 + x2 + x3
y =~ y1 + y2 + y3
m ~ x
y ~ x + m'
# Step 2: Set up the sensitivity analysis model.
#         The sensitivity parameters are phantom1, phantom2, and phantom3 in this example.
sens.model = 'x =~ x1 + x2 + x3
y =~ y1 + y2 + y3
m ~ x
y ~ x + m
x ~ phantom1*phantom
m ~ phantom2*phantom
y ~ phantom3*phantom
phantom =~ 0 # added for mean of zero
phantom ~~ 1*phantom' # added for unit variance
paths = NULL
# Calculate the number of sensitivity parameters
for.n.of.sens.pars <- lavaan::lavaanify(sens.model, fixed.x = TRUE)
n.of.sens.pars <-length(for.n.of.sens.pars[which(
for.n.of.sens.pars$lhs!="phantom" &
for.n.of.sens.pars$rhs=="phantom"), ]$lhs)
if (n.of.sens.pars < 2)
stop ("Sensitivity model must have at least two sensitivity parameters or phantom coefficients.")
# Run analytic model and pull results
if (is.null(data)){
old.out = lavaan::sem(model = model, sample.cov = sample.cov,
sample.nobs = sample.nobs, ...)
} else {
old.out = lavaan::sem(model = model, data = data, ...)
}
# Run analytic model and pull results
if (is.null(data)){
old.out = lavaan::sem(model = model, sample.cov = sample.cov,
sample.nobs = sample.nobs)
} else {
old.out = lavaan::sem(model = model, data = data)
}
ld.out
old.out
old.par = lavaan::standardizedSolution(old.out, type = "std.all")
old.fit <- lavaan::fitMeasures(old.out)
if (is.null(paths)) {paths <- old.par} # if paths are not set, all paths are included
if (is.character(paths)) {paths <- lavaan::lavaanify(paths, fixed.x = TRUE)} # if paths are in model format
if(is.data.frame(paths)){
if (measurement){
paths <- which(old.par$lhs %in% paths$lhs & old.par$rhs %in% paths$rhs)
} else {
paths <- which(old.par$lhs %in% paths$lhs & old.par$op =="~" & old.par$rhs %in% paths$rhs)
}
}
paths
# initiate a number of k sensitivity analysis models with random sensitivity parameters
#  sampled from domains
if (is.null(d)) {
d <- rep(list(seq(-1, 1, by=.01)), n.of.sens.pars)
} else {
if(!is.list(d)) stop("d (domain) must be in a list format; e.g.,
d =     list(x1 = seq(-1, 1, by=.01),
x2 = seq(-1, 1, by=.01),
x3 = seq(-1, 1, by=.01),
x4 = seq(-1, 1, by=.01),
x5 = seq(-1, 1, by=.01))")
}
Neighbour <- function(x) {
change.what <- sample.int(length(d), 1)
x[change.what] <- sample(d[[change.what]], 1)
return(x)
}
s0<- list() # sensitivity parameters
F0<- list() # objective function values
OBJECTIVEfunction <- function(Sens.Param.Vector,
opt.fun = opt.fun,
paths = paths){
Sens.Param.Vector <- as.vector(Sens.Param.Vector)
new.model = sens.model
for (i in 1:n.of.sens.pars) {
new.model = gsub(paste("phantom",i, sep=""), paste(Sens.Param.Vector[i]),
new.model, ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
}
try({
new.model = lavaan::lavaanify(new.model, auto = T, model.type = "sem")
warnings <- options(warn = 2)
if (is.null(data)){
new.out = try(lavaan::sem(model = new.model, sample.cov = sample.cov,
sample.nobs = sample.nobs, ...), silent = TRUE)
} else {
new.out = try(lavaan::sem(model = new.model, data = data, ...), silent = TRUE)
}
on.exit(options(warnings))
if(isTRUE(class(new.out)=="try-error")) {return(NA)}
new.par <- lavaan::standardizedSolution(new.out, type="std.all")
if (!is.numeric(opt.fun)){
y <-  eval(opt.fun)
} else if (opt.fun == 1) {
# if opt.fun==1, we assess the average departure of estimator in the
#   sensitivity analysis model from the analytic model divided by
#   the estimator in the analytic model
y <-  mean(abs(old.par$est[paths]), na.rm = TRUE)/
mean(abs(new.par$est[paths]), na.rm = TRUE)
} else if (opt.fun == 2){
# if opt.fun==2, we assess the standard deviation of estimate in
#    the sensitivity analysis model from the analytic model divided by
#    the estimate in the analytic model
y <-  stats::sd(new.par$est[paths] - old.par$est[paths], na.rm = TRUE)/
mean(abs(old.par$est[paths]), na.rm = TRUE)
} else if (opt.fun == 3) {
# if opt.fun==3, we assess the average p-value changed
y <-  mean(abs(new.par$pvalue[paths] - old.par$pvalue[paths]), na.rm = TRUE)
} else if (opt.fun == 4){
# if opt.fun==4, we assess the average distance of p-value from the significance level
y <-  1 / mean(abs(new.par$pvalue[paths] - rep(sig.level,length(paths))), na.rm = TRUE)
} else if (opt.fun == 5){
# if opt.fun==5, we assess the change of RMSEA
y <-  abs(unname(lavaan::fitmeasures(new.out)["rmsea"]) -
unname(lavaan::fitmeasures(old.out)["rmsea"]))
} else if (opt.fun == 6){
# if opt.fun==6, we optimize how close RMSEA is to 0.05
y <-  1/abs(unname(lavaan::fitmeasures(new.out)["rmsea"]) - 0.05)
}
}, silent = TRUE)
### Need to check to see if model converged to avoid the algorithm crashing.
if (is.null(new.out) == FALSE){
return(y)
}
else{return(NA)}
}
# Finds K starting points that do not return NA and assigns them to
# s0 (parameters) and F0 (objective function values)
for (i in 1:k) {
sens.par <- NULL
for (j in 1:n.of.sens.pars){
sens.par  <- c(sens.par, sample(d[[j]], 1))
}
s_prop <- sens.par
f_prop <- OBJECTIVEfunction(Sens.Param.Vector = s_prop,
opt.fun = opt.fun, paths = paths)
while (is.na(f_prop)== T ) {
sens.par <- NULL
for (j in 1:n.of.sens.pars){
sens.par  <- c(sens.par, sample(d[[j]], 1))
}
s_prop <- sens.par
s_prop
f_prop <-OBJECTIVEfunction(Sens.Param.Vector = s_prop,
opt.fun = opt.fun, paths = paths)
}
s0[[i]] <-   s_prop
F0[[i]] <-   f_prop
}
?sa.aco
library(SEMsens)
library(lavaan)
# Generate data, this is optional as lavaan also takes variance covariance matrix
sim.model <- ' x =~ x1 + 0.8*x2 + 1.2*x3
y =~ y1 + 0.5*y2 + 1.5*y3
m ~ 0.5*x
y ~ 0.5*x + 0.8*m'
set.seed(10)
data <- simulateData(sim.model, sample.nobs = 1000L)
# standardize dataset
data = data.frame(apply(data,2,scale))
# Step 1: Set up the analytic model of interest
model <- 'x =~ x1 + x2 + x3
y =~ y1 + y2 + y3
m ~ x
y ~ x + m'
# Step 2: Set up the sensitivity analysis model.
#         The sensitivity parameters are phantom1, phantom2, and phantom3 in this example.
sens.model = 'x =~ x1 + x2 + x3
y =~ y1 + y2 + y3
m ~ x
y ~ x + m
x ~ phantom1*phantom
m ~ phantom2*phantom
y ~ phantom3*phantom
phantom =~ 0 # added for mean of zero
phantom ~~ 1*phantom' # added for unit variance
# Step 3: Set up the paths of interest to be evaluated in sensitivity analysis.
# Suppose we are interested in all direct and indirect paths.
paths <- 'm ~ x
y ~ x + m'
# Step 4: Perform sensitivity analysis
my.sa <- sa.aco(data, model = model, sens.model = sens.model,
opt.fun = 3, k = 5, #p-value
paths = paths,
max.iter = 30)
#Note, please specify larger numbers for k (e.g., 100) and max.iter (e.g., 1000)
# Step 5: Summarize sensitivity analysis results.
# See sens.tables function for explanation of results.
tables <- sens.tables(my.sa)
# install.packages("rmarkdown")
library(devtools) # install this package if not installed
library(roxygen2) # install this package if not installed
setwd("D:\\Dropbox\\1 UF Projects\\Sensitivity Analysis for SEM\\SEMsens")
getwd()
library(lavaan)
install.packages("Rtools")
# install.packages("rmarkdown")
library(devtools) # install this package if not installed
library(roxygen2) # install this package if not installed
# install.packages("rmarkdown")
library(devtools) # install this package if not installed
library(roxygen2) # install this package if not installed
setwd("D:\\Dropbox\\1 UF Projects\\Sensitivity Analysis for SEM\\SEMsens")
getwd()
# 3. Package documentation----
devtools::document() # apply anything change in the document to the package
setwd("D:\\Dropbox\\1 UF Projects\\Sensitivity Analysis for SEM\\SEMsens")
getwd()
# 3. Package documentation----
devtools::document() # apply anything change in the document to the package
# install.packages("rmarkdown")
library(devtools) # install this package if not installed
library(roxygen2) # install this package if not installed
setwd("D:\\Dropbox\\1 UF Projects\\Sensitivity Analysis for SEM\\SEMsens")
getwd()
# 3. Package documentation----
devtools::document() # apply anything change in the document to the package
# install.packages("rmarkdown")
library(devtools) # install this package if not installed
library(roxygen2) # install this package if not installed
setwd("D:\\Dropbox\\1 UF Projects\\Sensitivity Analysis for SEM\\SEMsens")
getwd()
# 3. Package documentation----
devtools::document() # apply anything change in the document to the package
# install.packages("rmarkdown")
library(devtools) # install this package if not installed
library(roxygen2) # install this package if not installed
setwd("D:\\Dropbox\\1 UF Projects\\Sensitivity Analysis for SEM\\SEMsens")
getwd()
# 3. Package documentation----
devtools::document() # apply anything change in the document to the package
# 3. Package documentation----
devtools::document() # apply anything change in the document to the package
# install.packages("rmarkdown")
library(devtools) # install this package if not installed
library(roxygen2) # install this package if not installed
# install.packages("rmarkdown")
library(devtools) # install this package if not installed
library(roxygen2) # install this package if not installed
setwd("D:\\Dropbox (Personal)\\1 UF Projects\\Sensitivity Analysis for SEM")
getwd()
# 4. Package check and submission ----
#install.packages("spelling")
devtools::spell_check() # spell check
setwd("D:\\Dropbox (Personal)\\1 UF Projects\\Sensitivity Analysis for SEM")
getwd()
# 3. Package documentation----
devtools::document() # apply anything change in the document to the package
setwd("D:\\Dropbox (Personal)\\1 UF Projects\\Sensitivity Analysis for SEM")
getwd()
# 3. Package documentation----
devtools::document() # apply anything change in the document to the package
setwd("D:\\Dropbox (Personal)\\1 UF Projects\\Sensitivity Analysis for SEM")
getwd()
setwd("D:/Dropbox (Personal)/1 UF Projects/Sensitivity Analysis for SEM/Semsens")
getwd()
# 3. Package documentation----
devtools::document() # apply anything change in the document to the package
# 3. Package documentation----
devtools::document() # apply anything change in the document to the package
# 4. Package check and submission ----
#install.packages("spelling")
devtools::spell_check() # spell check
#install.packages("rhub")
devtools::check_rhub() # rhub check
setwd("D:/Dropbox (Personal)/1 UF Projects/Sensitivity Analysis for SEM/SEMsens")
getwd()
devtools::check_win_devel() # check on win-builder (with `check_win_devel()`)?
devtools::release() # submit to CRAN
setwd("D:/Dropbox (Personal)/1 UF Projects/Sensitivity Analysis for SEM/SEMsens")
getwd()
